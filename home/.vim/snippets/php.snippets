snippet php "php file header"
<?php namespace `!p
from subprocess import check_output
from os.path import relpath, dirname, abspath
snip.rv = relpath(dirname(abspath(path)), check_output("git rev-parse --show-toplevel", shell=True).strip()).replace('/','\\')
`;

$1
endsnippet

snippet p
<?php

$1
endsnippet

snippet base "base path"
define('BASE_PATH', dirname(__FILE__));

$1
endsnippet

snippet bp "adjusted base path"
define('BASE_PATH', str_replace('${1:/file/directory}', '', dirname(__FILE__)));

$2
endsnippet

snippet ar "array"
$${1:arrayName} = array('${2}' => ${3});${4}
endsnippet

snippet def "constant"
define('${1}'${2});${3}
endsnippet

snippet bc "block comment"
/**
 * ${1:comment}
 */
endsnippet

## Logic snippets

snippet if "if"
if (${1:/* condition */})
{
	${2:// code...}
}
endsnippet

snippet el "else"
else
{
	${1:// code...}
}
endsnippet

snippet ifel "if else"
if (${1:/* condition */})
{
	${2:// code...}
}
else
{
	${3:// code...}
}
$0
endsnippet

snippet wh "while"
while (${1:/* condition */})
{
	${2:// code...}
}

snippet do "do"
do {
	${2:// code... }
} while (${1:/* condition */});"
endsnippet

snippet for "for"
for ($${2:i} = 0; $$2 < ${1:count}; $$2${3:++})
{
	${4:// code...}
}
endsnippet

snippet fore "foreach"
foreach ($${1:variable} as $${3:value})
{
	${VISUAL}${4}
}
$0
endsnippet

snippet forek "foreachk"
foreach ($${1:variable} as $${2:key} => $${3:value})
{
	${4:// code...}
}
endsnippet

snippet rt "return ternary"
$${1:retVal} = (${2:condition}) ? ${3:a} : ${4:b};${5}
endsnippet

## Create & Document snippets

snippet pm "private member"
private $${1:name}${2: = ${3:value}};${4}
endsnippet

snippet meth "method declaration"
/**
 * ${5}
 * @return ${4:void}
 */
${1:public} function ${2:someFunc}(${3})
{${6}
}
endsnippet

snippet test "test class" !b
use `!p
from subprocess import check_output
from os.path import relpath, dirname, abspath, join
snip.rv = relpath(dirname(abspath(path)), join(check_output("git rev-parse --show-toplevel", shell=True).strip(), 'tests')).replace('/','\\') + '\\' + snip.fn.split('.')[0][:-4]
`;
use Mockery as m;

/**
 * ${1:`!p snip.rv=snip.fn.split('.')[0]`}
 */

class $1 extends \PHPUnit_Framework_TestCase
{
	${2:public function setUp()
	{
		$3
	}
	}
	public function test$4()
	{
		$5
	}
}
endsnippet

snippet class "php class" !b
/**
 * ${1:`!p snip.rv=snip.fn.split('.')[0]`}
 */
class $1${2: implements ${3}}
{
	public function __construct(${4})
	{${5}
	}${6}
}
endsnippet

snippet int "interface declaration"
/**
 * ${1:`!p snip.rv=snip.fn.split('.')[0]`}
 */
interface $1$2
{
	${3}
}
endsnippet

snippet fu "function" !b
function ${1:name}(${2:$param})
{
	${VISUAL}${3:return null;}
}
$0
endsnippet

snippet get "getter" !b
public function get${1/\w+\s*/\u$0/}()
{
	return $this->$1;$2
}
$4
endsnippet

snippet set "setter" !b
public function set${1/\w+\s*/\u$0/}($$1)
{
	$this->$1 = $$1;$3
		${4:return $this;}
}
$0
endsnippet

snippet gs "getter and setter (full field)" !b
protected $$1

public function get${1/\w+\s*/\u$0/}()
{
	return $this->$1;$2
}

public function set${1/\w+\s*/\u$0/}($$1)
{
	$this->$1 = $$1;$3
		${4:return $this;}
}
$0
endsnippet

snippet pub "public function" !b
public function ${1:name}(${2:$param})
{
	${VISUAL}${3:return null;}
}
$0
endsnippet

snippet pro "protected function" !b
protected function ${1:name}(${2:$param})
{
	${VISUAL}${3:return null;}
}
$0
endsnippet

snippet pri "private function" !b
private function ${1:name}(${2:$param})
{
	${VISUAL}${3:return null;}
}
$0
endsnippet

snippet pubs "public static function" !b
public static function ${1:name}(${2:$param})
{
	${VISUAL}${3:return null;}
}
$0
endsnippet

snippet pros "protected static function" !b
protected static function ${1:name}(${2:$param})
{
	${VISUAL}${3:return null;}
}
$0
endsnippet

snippet pris "private static function" !b
private static function ${1:name}(${2:$param})
{
	${VISUAL}${3:return null;}
}
$0
endsnippet

# File inclusion
snippet reqbase "require from base path"
require_once(BASE_PATH . '/${1:path}.php');
$0
endsnippet

snippet req1 "req"
require_once '${1:file}';${2}
endsnippet

snippet inc "inc"
include '${1:file}';${2}
endsnippet

# Logging/debug

snippet log "log"
error_log(var_export(${1}, true));${2}
endsnippet

snippet var "var"
var_export(${1});${2}
endsnippet

# Web

snippet get "get"
$_GET['${1}']${2}
endsnippet

snippet post "post"
$_POST['${1}']${2}
endsnippet

snippet session "session"
$_SESSION['${1}']${2}
endsnippet

snippet new "New class instance" !b
$$1 = new $1($2);
$0
endsnippet

snippet cparm "container parameter"
$container['${1:alias}'] = ${2:value};
endsnippet

snippet cpparm "container protected parameter"
$container['${1:alias}'] = $container->protect(function () { return ${2:value}; });
endsnippet

snippet cobj "container object"
$container['${1:alias}'] = function ($c) { return new ${2:object}(${3:dependencies}); };
endsnippet

snippet csobj "container shared object"
$container['${1:alias}'] = $container->share(function ($c) { return new ${2:object}(${3:dependencies}); });
endsnippet
# :vim:ft=snippets:
